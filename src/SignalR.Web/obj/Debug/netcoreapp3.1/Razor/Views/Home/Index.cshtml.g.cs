#pragma checksum "/Users/onur/repos/Udemy/SignalR/SignalR.Web/Views/Home/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9c0876afdb6317c11791c2367468278ec59917cf"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/onur/repos/Udemy/SignalR/SignalR.Web/Views/_ViewImports.cshtml"
using SignalR.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/onur/repos/Udemy/SignalR/SignalR.Web/Views/_ViewImports.cshtml"
using SignalR.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9c0876afdb6317c11791c2367468278ec59917cf", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"030e1eb72449d0c7949872cb873f87cfcf4eb4cc", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/microsoft-signalr/signalr.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(".");
#nullable restore
#line 1 "/Users/onur/repos/Udemy/SignalR/SignalR.Web/Views/Home/Index.cshtml"
   
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\n\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9c0876afdb6317c11791c2367468278ec59917cf3681", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"


    <script type=""text/javascript"">

        $(document).ready(() => {

            // configureLogging loglamayı console'a basıyor.
            /* withAutomaticReconnect => default olarka 0,2,10 ve 30 saniye olarak baglanıyor, metod icine bir [] türünde parametre verirsek
           kendi özel parametreleri verip defaultu ezebiliyoruz. */
            var connection = new signalR.HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withAutomaticReconnect().withUrl(""https://localhost:5001/myHub"").build();

            function statusShow() {
                $(""#connStatus"").text(connection.connectionState); // verilen url'e connect oluyor.
            }

            function start() {
                connection.start().then(() => {
                    $(""#loading"").hide();
                    statusShow();

                    // connection.invoke(""GetNames"");
                    connection.invoke(""GetNamesByGroup"");


                }).catch((err) => {
                    console.log(err);
    ");
                WriteLiteral(@"                setTimeout(() => start(), 2000)
                }); // connection durumunu yazıyor.


            }

       
            statusShow();
            start();


            $(""#btnNameSave"").click(() => {
                connection.invoke(""SendName"", $(""#txtName"").val()).catch((err) => console.log(err))
            }) // clicklendiğinde girilen ismi Hubs'daki sendName kısmına gönderiyor.

            $(""#btnNameTeam"").click(() => {
                let name = $(""#txtName"").val();
                let teamName = $(""input[type=radio]:checked"").val();

                connection.invoke(""SendNameByGroup"", name, teamName).catch((err) => {
                    console.log(err);
                });

            }) // clicklendiğinde girilen ismi Hubs'daki sendName kısmına gönderiyor.

            connection.on(""ReceiveName"", (name) => {
            //console.log(name);  gönderileni konsola basıyor.
                $(""#namesList"").append(`<li class=""list-group-item""> ${name} </li>`) // listeye ekliyor.
    ");
                WriteLiteral(@"        })

            connection.on(""ReceiveClientCount"", (clientCount) => {
                console.log(clientCount);
                $(""#clientCount"").text(clientCount);
            })

            connection.onreconnecting(err => {
                $(""#loading"").show();
                statusShow(); statusShow();
                console.log(""onreconnection: ""+ err)
            }) // tekrar bağlanırken yapılan işlem

            connection.onreconnected(connectionId => {
                $(""#loading"").hide();
                statusShow();
                console.log(""connectionId: "" + connectionId);
            }) // tekrar bağlandığında yapılan işlem

            connection.onclose(() => {
                $(""#loading"").hide();
                statusShow();
                start();
            }) // bağlantı tamamen kaybedildiğinde yapılan işlem
  
            connection.on(""Notify"", (countText) => {
                $(""#notify"").html(`<div class=""alert alert-success"">${countText} </div>`)
            })

  ");
                WriteLiteral(@"          connection.on(""Error"", (errorText) => {
                alert(errorText);
            })

            connection.on(""ReceiveNames"", (names) => {
                $(""#namesList"").empty();
                names.forEach((item, index) => {
                    $(""#namesList"").append(`<li class=""list-group-item"">${item} </li>`)
                })

            })

            connection.on(""ReceiveMessageByGroup"", (name, teamId) => {

                let listName;
                if (teamId == 1)
                    listName = ""ATeamList"";
                else
                    listName = ""BTeamList"";

                $(`#${listName}`).append(`<li class=""list-group-item"">${name} </li>`)
            })

            connection.on(""ReceiveNamesByGroup"", (teams) => {
                teams.forEach((team, index) => {
                    let listName;
                    if (team.teamId == 1)
                        listName = ""ATeamList"";
                    else
                        listName = ""BTeamList"";
");
                WriteLiteral(@"                    team.users.forEach((user, index2) => {
                        $(`#${listName}`).append(`<li class=""list-group-item"">${user.name} </li>`)
                    })
                })
            })

            $(""input[type=radio]"").change(() => {

                let value = $(""input[type=radio]:checked"").val();
                if (value == ""TeamA"") {
                    connection.invoke(""AddToGroup"", value);
                    connection.invoke(""RemoveToGroup"", ""TeamB"");
                }
                else {
                    connection.invoke(""RemoveToGroup"", ""TeamA"");
                    connection.invoke(""AddToGroup"", value);
                   
                }
            });


           
        })
        
        

    </script>

");
            }
            );
            WriteLiteral(@"
<div class=""row"">
    <div class=""col-md-8 offset-2"">
        <input class=""form-control"" type=""text"" id=""txtName"" />
        <br />
        <button class=""btn btn-primary"" id=""btnNameSave"">İsim Kaydet</button>
        <button class=""btn btn-warning"" id=""btnNameTeam"">Takıma Kaydet</button>
        <div class=""alert alert-info mt-2"">
            <div class=""float-left"">
                Bağlantı Durumu:<strong id=""connStatus""></strong>
                ,Client Saysı:<strong id=""clientCount""></strong>
            </div>
            <div class=""float-right"">
                <div id=""loading"" class=""spinner-border"" role=""status"">
                    <span class=""sr-only"">Loading...</span>
                </div>
            </div>
            <div class=""clearfix""></div>
        </div>

        <div id=""notify""></div>
    </div>  
</div>

<div class=""row"">

    <div class=""col-md-8 offset-md-2"">

        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""radio"" name=""TeamGr");
            WriteLiteral(@"oup"" value=""TeamA"" />
            <label class=""form-check-label"">A Takımı</label>
            <input class=""form-check-input"" type=""radio"" name=""TeamGroup"" value=""TeamB"" />
            <label class=""form-check-label"">B Takımı</label>
        </div>

    </div>

    <div class=""col-md-8 offset-2"">

        <div class=""row"">
            <div class=""col-md-6"">
                <ul class=""list-group"" id=""ATeamList""></ul>
            </div>
            <div class=""col-md-6"">
                <ul class=""list-group"" id=""BTeamList""></ul>
            </div>
        </div>

       
    </div>
</div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
